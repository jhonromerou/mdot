#!/usr/bin/env bash

# Path app installation
# Require define before call

# Colores
C_RED='\033[0;31m'
C_NC='\033[0m'


# ------
 # Functions
# ------

# Functions to use in app

function i_br()
{ 
    echo "" 
}

function i_read()
{
    message=$(printf " ${C_RED}===>${C_NC} $1")
    shift
    read -e -p "$message" $@
    i_br
}

function i_echo()
{
    printf "$1\n"
}

function i_mdot_title()
{
    printf "${C_RED}****${C_NC} $1\n"
}

function i_mdot_err()
{
    printf "🚫🚫 $1\n"
}

function i_mdot_success()
{
    printf "✅✅ $1\n"
}

function i_mdot_info()
{
    printf "ℹ️ ℹ️ $1\n"
}
function i_mdot_output()
{
    printf "⏩⏩ $1\n"
}

function i_mdot_abort()
{
    printf "⏹️  ⏹️  Se detuvo la ejecución\n"
}

# Return to initial directory
function i_mdot_pwd()
{
    cd $MDOT_PWD
}

# Elimina sileciosamente
function i_mdot_rm()
{
    rm -f "$1" > /dev/null
}

# Sirve para validar si hay errores
 # linea 1: se pasa true
 # linea 2: Contenido del error
 # Si cumple devuelve 
function i_mdot_has_error()
{
    lines=$(echo "$1" | wc -l)
    line_1=$(echo "$1" | head -1)
    if [ "$line_1" = true ] && [ "$lines" = 2 ]; then
        echo "$1" | tail +2
    fi
}

function mdot-core-clear(){
    #unset -f i_mdot_title
    unset -f i_echo
    unset -f i_read
    unset -f i_br
    unset -f mdot-core-clear
}

# TODO: refactor

# Detiene el proceso que esté usando el puerto tcp definido
 # m-kill-port 80:
function m-kill-port () {
    fuser -k -n tcp $@
}

# Devuelve el número de linea del texto "texto" path
function m-grep-line()
{
    grep -n $@ | awk -F ":" '{ print $1 }' | head -1
}

function i_mdot_tmp()
{
    mkdir -p $MDOT_TMP
    mkdir -p "$MDOT_TMP/coverage"
    mkdir -p "$MDOT_TMP/composer"
    gitignore="$MDOT_TMP/.gitignore"
    rm -f 
    echo "*" > $gitignore
}