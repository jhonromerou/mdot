#!/usr/bin/env bash


function m-php()
{
    if [[ $1 ]]; then
        version="php$1"
    else
        version=`ls -1 /usr/bin | grep -E '^php[0-9]' \
        | fzf --layout=reverse-list --header="Seleccione la versiÃ³n a usar" \
        | awk '{ print $1 }' | head -1`;
    fi

    if [[ $version ]]; then
        sudo update-alternatives --set php "/usr/bin/$version"
    fi
}

function _m-php-v(){
    php_v=$(php -v | head -1 | awk '{ print $2 }')

    if [ "$1" != "--all" ]; then
        php_v=$(echo "$php_v" | awk -F "." '{ print $1"."$2 }')
    fi
    echo $php_v
}

function m-php-ext-enable()
{
    version_to_use=$1
    if [ "$version_to_use" ]; then
        php_v="$version_to_use"
    else
        php_v=$(_m-php-v)
    fi

    path="/etc/php/$php_v/mods-available"
    
    cd $path
    ext_sel=$(grep -r $path -e '^[;].*extension' \
     | awk -F ":" '{ print $1 }' \
     | fzf --preview='head {}'
    )

    if [[ $ext_sel ]]; then
        line_num=$(grep -ne '^[;].*extension' $ext_sel | awk -F ":" '{ print $1 }')
        sudo sed -i '3s/;//' $ext_sel
        echo "Extension enabled"
        echo $ext_sel
    fi

    i_mdot_pwd
}

function m-php-ext-disable()
{
    version_to_use=$1
    if [ "$version_to_use" ]; then
        php_v="$version_to_use"
    else
        php_v=$(_m-php-v)
    fi

    path="/etc/php/$php_v/mods-available"

    cd $path
    ext_sel=$(grep -rsv . -e '^;.*extension' \
        | awk -F ":" '{ print $1 }' \
        | awk -F "./" '{ print $2 }' \
        | fzf --preview='head {}'
    )

    if [[ $ext_sel ]]; then
        line=$(grep -n ".*extension" $ext_sel)
        line_num=$(echo "$line" | awk -F ":" '{ print $1 }')
        line_txt=$(echo "$line" | awk -F ":" '{ print $2 }')
        sudo sed -i "${line_num}s/${line_txt}/;${line_txt}/" $path/$ext_sel
        echo "Extension disabled"
        echo $path/$ext_sel
    fi

    i_mdot_pwd
}

#
 #Require composer
#

function m-php-cs()
{
    isRequired=$(m-composer-required)
    if [ $isRequired ]; then
        echo $isRequired
        return
    fi

    i_mdot_tmp
    errors_path="$MDOT_TMP/format-errors.txt"
    rm -f $errors_path > /dev/null

    # Definir origen de reglas
    if [ -f ".php_cs" ]; then
        require_lib="friendsofphp/php-cs-fixer:v2.19.2"
        cs_vhelp="#version:2.19"
    else
        require_lib="friendsofphp/php-cs-fixer"
        cs_vhelp="#latest"
    fi

    installed_v=$(m-composer-package-v "php-cs-fixer")
    if [ "$installed_v" ]; then
        bin_package="vendor/bin/php-cs-fixer"
    else
        composer require -q --working-dir="$MDOT_TMP/composer" --dev $require_lib
        bin_package="$MDOT_TMP/composer/vendor/bin/php-cs-fixer"
    fi

    i_mdot_title "Cargando php-cs-fixer... $bin_package"
    "$bin_package" fix --using-cache=no --show-progress=yes \
    --format=checkstyle --dry-run > $errors_path

    num_errors=$(grep -c "<error" $errors_path)
    if [ "$num_errors" -gt 0 ]; then
        i_mdot_title "Reporte generado ğŸ“°ğŸ“° $errors_path"
        echo "ğŸ˜µğŸ˜µ Se encontraron $num_errors error/es de formato: "
        echo "  Puede obtener ayuda en el siguiente enlace"
        echo "  https://mlocati.github.io/php-cs-fixer-configurator/$cs_help"
    else
        i_mdot_success "Sin errores de formato"
    fi
}

function m-php-stan()
{
    isRequired=$(m-composer-required)
    if [ "$isRequired" != false ]; then
        echo $isRequired
    else
        i_mdot_tmp
        memory_limit="300M"
        if [[ "$1" ]]; then
            memory_limit=$1
        fi

        i_mdot_title "Revisando con php-stand... --memory-limit $memory_limit"

        path_install=""
        if ! [ -d "vendor/phpstan" ]; then
            path_install="$MDOT_TMP/composer/"
            composer require -q --working-dir=$path_install \
            --dev phpstan/phpstan:0.11
        fi

        report_errors="$MDOT_TMP/static-errors.txt"
        report_fatals="$MDOT_TMP/static-fatal.txt"
        "${path_install}vendor/bin/phpstan" analyse --no-progress --memory-limit=$memory_limit \
        > $report_errors \
        2> $report_fatals

        num_errors=$(grep "\[ERROR\] Found" $report_errors | grep -o "[0-9]\{1,\}")
        # TODO: calcular correctamente fatals, muestra 0
        num_fatals=$(grep -c "Fatal error" $report_fatals)

        i_mdot_title "Reportes generados:"
        echo "ğŸ“°ğŸ“° ${report_errors} ğŸ‘¾ ${num_errors}"
        echo "ğŸ“°ğŸ“° ${report_fatals} ğŸ‘¾ ${num_fatals}"
    fi
}